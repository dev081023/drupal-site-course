<?php

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;

/**
 * Implements hook_theme().
 */
function bda_news_theme($existing, $type, $theme, $path): array {
  return [
    'bda_template' => [
      'variables' => ['test_var' => NULL],
    ],
  ];
}

/**
 * Implements hook_form_alter().
 */
function bda_news_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'user_login_form') {
    $form['#submit'][] = 'dba_news_submit_handler';
  }
}

/**
 * Submit Handler.
 * Redirects the moderator after login to the /admin/content page, and if not,
 * to the main page.
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function dba_news_submit_handler(&$form, FormStateInterface $form_state) {
  $user = \Drupal::currentUser()->getRoles();
  if (in_array('moderator', $user)) {
    $form_state->setRedirect('system.admin_content');
  }
  else {
    $form_state->setRedirect('<front>');
  }
}

/**
 * Implements hook_entity_field_access().
 */
function bda_news_entity_field_access($operation, FieldDefinitionInterface $field_definition,
                                      AccountInterface $account, FieldItemListInterface $items = NULL) {
  if ($operation == 'edit' && $field_definition->getName() == 'field_publication_date'
    && !$account->hasPermission('view field published date')) {
    return AccessResult::forbidden();
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_entity_update().
 */
function bda_news_entity_update(EntityInterface $entity) {
  if ($entity->getEntityTypeId() == 'node' && $entity->getEntityType() == 'news') {
    \Drupal::database()
      ->update('node__field_published_date')
      ->fields([
        'field_published_date_value' => \Drupal::time()->getCurrentTime()
      ])
      ->condition('type', $entity->getEntityTypeId())
      ->condition('id', $entity->id())
      ->execute();
  }
}
